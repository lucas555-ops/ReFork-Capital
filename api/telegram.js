// /api/telegram.js
module.exports = async function handler(req, res) {
  // ===== CORS WHITELIST =====
  const allowedOrigins = [
    'https://lucas555-ops.github.io',
    'https://reforkcapital.online',
    'http://localhost:3000'
  ];
  
  const origin = req.headers.origin;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º origin –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
  if (allowedOrigins.includes(origin)) {
    res.setHeader('Access-Control-Allow-Origin', origin);
  } else {
    console.log('üö´ Blocked origin:', origin);
    return res.status(403).json({ 
      success: false, 
      error: 'Origin not allowed' 
    });
  }
  
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Accept');
  res.setHeader('Access-Control-Max-Age', '86400');

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è CORS
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST
  if (req.method !== 'POST') {
    return res.status(405).json({ 
      success: false, 
      error: 'Method not allowed' 
    });
  }

  try {
    console.log('‚úÖ API call from allowed origin:', origin);
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.body);

    const { name, telegram, package: pkg, lang = 'ru', source = 'ReFork Capital' } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!name || !telegram || !pkg) {
      return res.status(400).json({ 
        success: false, 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' 
      });
    }

    // ===== –í–ê–õ–ò–î–ê–¶–ò–Ø TELEGRAM =====
    const telegramPattern = /^@[A-Za-z0-9_]{5,32}$/;
    if (!telegramPattern.test(telegram)) {
      return res.status(400).json({ 
        success: false, 
        error: 'Invalid Telegram format. Use @username format' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞)
    const botToken = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID || process.env.CHAT_ID;

    console.log('üîê BOT_TOKEN exists:', !!botToken);
    console.log('üí¨ CHAT_ID exists:', !!chatId);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!botToken || !chatId) {
      console.error('‚ùå Missing environment variables');
      return res.status(500).json({ 
        success: false, 
        error: '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID' 
      });
    }

    // ===== –§–û–†–ú–ò–†–£–ï–ú –£–õ–£–ß–®–ï–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï =====
    const message = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ReFork Capital</b>

üë§ <b>–ò–º—è:</b> ${name}
üì± <b>Telegram:</b> ${telegram}
üí∞ <b>–ü–∞–∫–µ—Ç:</b> ${pkg}
üåê <b>–Ø–∑—ã–∫:</b> ${lang}
üìç <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${source}
üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
    `.trim();

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      })
    });

    const telegramData = await telegramResponse.json();
    console.log('üì© –û—Ç–≤–µ—Ç –æ—Ç Telegram API:', telegramData);

    if (telegramResponse.ok) {
      console.log('‚úÖ Message sent successfully to:', telegram);
      res.status(200).json({ 
        success: true,
        message: '‚úÖ –°–∏–≥–Ω–∞–ª –ø–æ–ª—É—á–µ–Ω! –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.'
      });
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', telegramData);
      res.status(500).json({ 
        success: false, 
        error: `–û—à–∏–±–∫–∞ Telegram: ${telegramData.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}` 
      });
    }

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ 
      success: false, 
      error: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}` 
    });
  }
};
